{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SivaramakrishnanBaskar/-SOLUTION-TO-A-SYSTEM-OF-LINEAR-EQUATIONS/blob/main/Pqm%20programs\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxuQa72S-7IF",
        "outputId": "be607bd8-a02d-45d3-93b3-7a14fd524106"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8 8 7 6 4 8 9 6 5 2\n",
            "The Mean arrival rate is 6.300 \n",
            "The Variance of arrival from feeder is 4.210 \n",
            "The Standard deviation of arrival from feeder is 2.052 \n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "L=[int(i) for i in input().split()]\n",
        "N=len(L); M=max(L)\n",
        "x=list();f=list()\n",
        "for i in range (M+1):\n",
        "    c = 0\n",
        "    for j in range(N):\n",
        "        if L[j]==i:\n",
        "            c=c+1\n",
        "    f.append(c)\n",
        "    x.app end(i)\n",
        "sf=np.sum(f)\n",
        "p=list()\n",
        "for i in range(M+1):\n",
        "    p.append(f[i]/sf)\n",
        "mean=np.inner(x,p)\n",
        "EX2=np.inner(np.square(x),p)\n",
        "var=EX2-mean**2\n",
        "SD=np.sqrt(var)\n",
        "print(\"The Mean arrival rate is %.3f \"%mean)\n",
        "print(\"The Variance of arrival from feeder is %.3f \"%var)\n",
        "print(\"The Standard deviation of arrival from feeder is %.3F \"%SD)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import scipy.stats\n",
        "L=[int(i) for i in input().split()]\n",
        "N=len(L); M=max(L)\n",
        "X=list();f=list()\n",
        "for i in range (M+1):\n",
        "    c = 0\n",
        "    for j in range(N):\n",
        "        if L[j]==i:\n",
        "            c=c+1\n",
        "    f.append(c)\n",
        "    X.append(i)\n",
        "sf=np.sum(f)\n",
        "p=list()\n",
        "for i in range(M+1):\n",
        "    p.append(f[i]/sf)\n",
        "mean=np.inner(X,p)\n",
        "p=list();E=list();xi=list()\n",
        "print(\"X P(X=x) Obs.Fr Exp.Fr xi\")\n",
        "print(\"--------------------------\")\n",
        "for x in range(M+1):\n",
        "    p.append(math.exp(-mean)*mean**x/math.factorial(x))\n",
        "    E.append(p[x]*sf)\n",
        "    xi.append((f[x]-E[x])**2/E[x])\n",
        "    print(\"%2.2f %2.3f %4.2f %3.2f %3.2f\"%(x,p[x],f[x],E[x],xi[x]))\n",
        "print(\"--------------------------\")\n",
        "cal_chi2_sq=np.sum(xi)\n",
        "print(\"Calculated value of Chi square is %4.2f\"%cal_chi2_sq)\n",
        "table_chi2=scipy.stats.chi2.ppf(1-.01,df=M)\n",
        "print(\"Table value of chi square at 1 level is %4.2f\"%table_chi2)\n",
        "if cal_chi2_sq<table_chi2:\n",
        "   print(\"The given data can be fitted in poisson Distribution at 1% LOS\")\n",
        "else:\n",
        "    print(\"The given data cannot be fitted in Poisson Distribution at 1% LOS\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iM7uAgamEFNX",
        "outputId": "dc4610bb-c5a7-4520-9568-dadf265d2af5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5 6 7 2 3 1 8 9\n",
            "X P(X=x) Obs.Fr Exp.Fr xi\n",
            "--------------------------\n",
            "0.00 0.006 0.00 0.05 0.05\n",
            "1.00 0.030 1.00 0.24 2.35\n",
            "2.00 0.078 1.00 0.62 0.23\n",
            "3.00 0.133 1.00 1.07 0.00\n",
            "4.00 0.171 0.00 1.37 1.37\n",
            "5.00 0.175 1.00 1.40 0.12\n",
            "6.00 0.150 1.00 1.20 0.03\n",
            "7.00 0.110 1.00 0.88 0.02\n",
            "8.00 0.070 1.00 0.56 0.34\n",
            "9.00 0.040 1.00 0.32 1.45\n",
            "--------------------------\n",
            "Calculated value of Chi square is 5.94\n",
            "Table value of chi square at 1 level is 21.67\n",
            "The given data can be fitted in poisson Distribution at 1% LOS\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "import matplotlib.pyplot as plt\n",
        "x=[ int(i) for i in input().split()]\n",
        "y=[ int(i) for i in input().split()]\n",
        "N=len(x)\n",
        "Sx=0\n",
        "Sy=0\n",
        "Sxy=0\n",
        "Sx2=0\n",
        "Sy2=0\n",
        "for i in range(0,N):\n",
        "    Sx=Sx+x[i]\n",
        "    Sy=Sy+y[i]\n",
        "    Sxy=Sxy+x[i]*y[i]\n",
        "    Sx2=Sx2+x[i]**2\n",
        "    Sy2=Sy2+y[i]**2\n",
        "r=(N*Sxy-Sx*Sy)/(math.sqrt(N*Sx2-Sx**2)*math.sqrt(N*Sy2-Sy**2))\n",
        "print(\"The Correlation coefficient is %0.3f\"%r)\n",
        "byx=(N*Sxy-Sx*Sy)/(N*Sx2-Sx**2)\n",
        "xmean=Sx/N\n",
        "ymean=Sy/N\n",
        "print(\"The Regression line Y on X is ::: y = %0.3f + %0.3f (x-%0.3f)\"%(ymean,byx,xmean))\n",
        "plt.scatter(x,y)\n",
        "def Reg(x):\n",
        "  return ymean + byx*(x-xmean)\n",
        "x=np.linspace(20,80,51)\n",
        "y1=Reg(x)\n",
        "plt.plot(x,y1,'r')\n",
        "plt.xlabel('x-data')\n",
        "plt.ylabel('y-data')\n",
        "plt.legend(['Regression Line','Data points'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 536
        },
        "id": "0IDJs2FdFqdt",
        "outputId": "f624c7bd-228f-4901-f880-fc1f5baf794a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "25 28 35 32 31 36 29 38 34 32\n",
            "43 46 49 41 36 32 31 30 33 39\n",
            "The Correlation coefficient is -0.394\n",
            "The Regression line Y on X is ::: y = 38.000 + -0.664 (x-32.000)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7ff12fdd1810>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr_time=float(input(\"Enter the mean inter arrival time of objects from Feeder (in secs): \"))\n",
        "ser_time=float(input(\"Enter the mean  inter service time of Lathe Machine (in secs) :  \"))\n",
        "Robot_time=float(input(\"Enter the Additional time taken for the Robot (in secs) :  \"))\n",
        "lam=1/arr_time\n",
        "mu=1/(ser_time+Robot_time)\n",
        "print(\"--------------------------------------------------------------\")\n",
        "print(\"Single Server with Infinite Capacity - (M/M/1):(oo/FIFO)\")\n",
        "print(\"--------------------------------------------------------------\")\n",
        "print(\"The mean arrival rate per second : %0.2f \"%lam)\n",
        "print(\"The mean service rate per second : %0.2f \"%mu)\n",
        "if (lam <  mu):\n",
        "    Ls=lam/(mu-lam)\n",
        "    Lq=Ls-lam/mu\n",
        "    Ws=Ls/lam\n",
        "    Wq=Lq/lam\n",
        "    print(\"Average number of objects in the system : %0.2f \"%Ls)\n",
        "    print(\"Average number of objects in the conveyor :  %0.2f \"%Lq)\n",
        "    print(\"Average waiting time of an object in the system : %0.2f secs\"%Ws)\n",
        "    print(\"Average waiting time of an object in the conveyor : %0.2f secs\"%Wq)\n",
        "    print(\"Probability that the system is busy : %0.2f \"%(lam/mu) )\n",
        "    print(\"Probability that the system is empty : %0.2f \"%(1-lam/mu) )\n",
        "else:\n",
        "    print(\"Warning! Objects Over flow will happen in the conveyor\")\n",
        "print(\"---------------------------------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nw6jyw9bF5kH",
        "outputId": "482b4faf-3b5f-47c9-e0b2-c58c4ad04084"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the mean inter arrival time of objects from Feeder (in secs): 12\n",
            "Enter the mean  inter service time of Lathe Machine (in secs) :  1\n",
            "Enter the Additional time taken for the Robot (in secs) :  7\n",
            "--------------------------------------------------------------\n",
            "Single Server with Infinite Capacity - (M/M/1):(oo/FIFO)\n",
            "--------------------------------------------------------------\n",
            "The mean arrival rate per second : 0.08 \n",
            "The mean service rate per second : 0.12 \n",
            "Average number of objects in the system : 2.00 \n",
            "Average number of objects in the conveyor :  1.33 \n",
            "Average waiting time of an object in the system : 24.00 secs\n",
            "Average waiting time of an object in the conveyor : 16.00 secs\n",
            "Probability that the system is busy : 0.67 \n",
            "Probability that the system is empty : 0.33 \n",
            "---------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "arr_time=float(input(\"Enter the mean inter arrival time of objects from Feeder (in secs): \"))\n",
        "ser_time=float(input(\"Enter the mean  inter service time of Lathe Machine (in secs) :  \"))\n",
        "Robot_time=float(input(\"Enter the Additional time taken for the Robot (in secs) :  \"))\n",
        "c=int(input(\"Number of service centre :  \"))\n",
        "lam=1/arr_time\n",
        "mu=1/(ser_time+Robot_time)\n",
        "print(\"--------------------------------------------------------------\")\n",
        "print(\"Multiple Server with Infinite Capacity - (M/M/c):(oo/FIFO)\")\n",
        "print(\"--------------------------------------------------------------\")\n",
        "print(\"The mean arrival rate per second : %0.2f \"%lam)\n",
        "print(\"The mean service rate per second : %0.2f \"%mu)\n",
        "rho=lam/(c*mu)\n",
        "sum=(lam/mu)**c*(1/(1-rho))/math.factorial(c)\n",
        "for i in range(0,c):\n",
        "    sum=sum+(lam/mu)**i/math.factorial(i)\n",
        "P0=1/sum\n",
        "if (rho<1):\n",
        "    Lq=(P0/math.factorial(c))*(1/c)*(lam/mu)**(c+1)/(1-rho)**2\n",
        "    Ls=Lq+lam/mu\n",
        "    Ws=Ls/lam\n",
        "    Wq=Lq/lam\n",
        "    print(\"Average number of objects in the system : %0.2f \"%Ls)\n",
        "    print(\"Average number of objects in the conveyor :  %0.2f \"%Lq)\n",
        "    print(\"Average waiting time of an object in the system : %0.2f secs\"%Ws)\n",
        "    print(\"Average waiting time of an object in the conveyor : %0.2f secs\"%Wq)\n",
        "    print(\"Probability that the system is busy : %0.2f \"%(rho))\n",
        "    print(\"Probability that the system is empty : %0.2f \"%(1-rho))\n",
        "else:\n",
        "    print(\"Warning! Objects Over flow will happen in the conveyor\")\n",
        "print(\"--------------------------------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "twLwLavUIlb8",
        "outputId": "8c911844-0dd1-48a3-9a14-7205d285da33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the mean inter arrival time of objects from Feeder (in secs): 10\n",
            "Enter the mean  inter service time of Lathe Machine (in secs) :  1\n",
            "Enter the Additional time taken for the Robot (in secs) :  7\n",
            "Number of service centre :  2\n",
            "--------------------------------------------------------------\n",
            "Multiple Server with Infinite Capacity - (M/M/c):(oo/FIFO)\n",
            "--------------------------------------------------------------\n",
            "The mean arrival rate per second : 0.10 \n",
            "The mean service rate per second : 0.12 \n",
            "Average number of objects in the system : 0.95 \n",
            "Average number of objects in the conveyor :  0.15 \n",
            "Average waiting time of an object in the system : 9.52 secs\n",
            "Average waiting time of an object in the conveyor : 1.52 secs\n",
            "Probability that the system is busy : 0.40 \n",
            "Probability that the system is empty : 0.60 \n",
            "--------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "arr_time=float(input(\"Enter the mean inter arrival time of objects from Feeder (in secs): \"))\n",
        "ser_time1=float(input(\"Enter the mean  inter service time of Lathe Machine 1 (in secs) :  \"))\n",
        "ser_time2=float(input(\"Enter the mean  inter service time of Lathe Machine 2 (in secs) :  \"))\n",
        "ser_time3=float(input(\"Enter the mean  inter service time of Lathe Machine 3 (in secs) :  \"))\n",
        "Robot_time=float(input(\"Enter the Additional time taken for the Robot (in secs) :  \"))\n",
        "lam=1/arr_time\n",
        "mu1=1/(ser_time1+Robot_time)\n",
        "mu2=1/(ser_time2+Robot_time)\n",
        "mu3=1/(ser_time3+Robot_time)\n",
        "print(\"-----------------------------------------------------------------------\")\n",
        "print(\"Series Queues with infinite capacity- Open Jackson Network\")\n",
        "print(\"-----------------------------------------------------------------------\")\n",
        "if (lam <  mu1) and (lam <  mu2) and (lam <  mu3):\n",
        "    Ls1=lam/(mu1-lam)\n",
        "    Ls2=lam/(mu2-lam)\n",
        "    Ls3=lam/(mu3-lam)\n",
        "    Ls=Ls1+Ls2+Ls3\n",
        "    Lq1=Ls1-lam/mu1\n",
        "    Lq2=Ls2-lam/mu2\n",
        "    Lq3=Ls3-lam/mu3\n",
        "    Wq1=Lq1/lam\n",
        "    Wq2=Lq2/lam\n",
        "    Wq3=Lq3/lam\n",
        "    Ws=Ls/(3*lam)\n",
        "    print(\"Average number of objects in the system S1 : %0.2f \"%Ls1)\n",
        "    print(\"Average number of objects in the system S2 : %0.2f \"%Ls2)\n",
        "    print(\"Average number of objects in the system S3 : %0.2f \"%Ls3)\n",
        "    print(\"Average number of objects in the overall system    : %0.2f \"%Ls)\n",
        "    print(\"Average number of objects in the conveyor S1  :  %0.2f \"%Lq1)\n",
        "    print(\"Average number of objects in the conveyor S2  :  %0.2f \"%Lq2)\n",
        "    print(\"Average number of objects in the conveyor S3  :  %0.2f \"%Lq3)\n",
        "    print(\"Average waiting time of an object in the conveyor S1 : %0.2f secs\"%Wq1)\n",
        "    print(\"Average waiting time of an object in the conveyor S2 : %0.2f secs\"%Wq2)\n",
        "    print(\"Average waiting time of an object in the conveyor S3 : %0.2f secs\"%Wq3)\n",
        "else:\n",
        "    print(\"Warning! Objects Over flow will happen in the conveyor\")\n",
        "print(\"----------------------------------------------------------------------\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UxuHu-GhJEZb",
        "outputId": "aa47f762-3cdb-4b96-9ce2-9159dd0b4cba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the mean inter arrival time of objects from Feeder (in secs): 12\n",
            "Enter the mean  inter service time of Lathe Machine 1 (in secs) :  1\n",
            "Enter the mean  inter service time of Lathe Machine 2 (in secs) :  1.5\n",
            "Enter the mean  inter service time of Lathe Machine 3 (in secs) :  1.3\n",
            "Enter the Additional time taken for the Robot (in secs) :  7\n",
            "-----------------------------------------------------------------------\n",
            "Series Queues with infinite capacity- Open Jackson Network\n",
            "-----------------------------------------------------------------------\n",
            "Average number of objects in the system S1 : 2.00 \n",
            "Average number of objects in the system S2 : 2.43 \n",
            "Average number of objects in the system S3 : 2.24 \n",
            "Average number of objects in the overall system    : 6.67 \n",
            "Average number of objects in the conveyor S1  :  1.33 \n",
            "Average number of objects in the conveyor S2  :  1.72 \n",
            "Average number of objects in the conveyor S3  :  1.55 \n",
            "Average waiting time of an object in the conveyor S1 : 16.00 secs\n",
            "Average waiting time of an object in the conveyor S2 : 20.64 secs\n",
            "Average waiting time of an object in the conveyor S3 : 18.62 secs\n",
            "----------------------------------------------------------------------\n"
          ]
        }
      ]
    }
  ]
}